
## PROJECT RULES

### GENERAL

1.  **Focus:** The primary goal is to deliver functional, well-structured, and maintainable code that adheres to the project's specifications.
2.  **Understand the Request:** Always confirm your understanding of the user's request before starting. Ask clarifying questions to ensure you have a clear picture of the desired outcome.
3.  **Incremental Development:** Break down complex tasks into smaller, manageable steps. Implement and test each step before moving on to the next.
4.  **Code Comments:** Add comments to explain complex logic, especially in backend code.
5.  **Error Handling:** Implement robust error handling to prevent crashes and provide informative error messages.
6.  **Junior-Friendly Code:** Keep the code simple and easy to understand, even for developers with limited experience.
7.  **TODOs:** Use TODO comments to mark areas for future improvement or further development.
8.  **Prioritize Relevance:** When searching for recipes, prioritize recipes that contain more of the searched ingredients.

### AUTHENTICATION

1.  **Secure Authentication:** Implement secure authentication using JWT (HS256) and bcrypt for password hashing.
2.  **Unique Email Validation:** Ensure that each user has a unique email address in the database.
3.  **Token Storage:** Store JWT tokens in memory and localStorage on the frontend.
4.  **Profile Protection:** The profile tab should be locked until the user is logged in.
5.  **Logout Functionality:** Implement a logout feature that clears the token and redirects the user to the login page.
6.  **Login/Register Visibility:**
    *   When logged out, show only the "Login/Register" tab.
    *   When logged in, show only the "Profile" tab, hiding the Login/Register functionality.
    *   Prevent switching to the auth tab when logged in.

### RECIPES

1.  **TheMealDB API:** Use TheMealDB API for recipe searches.
2.  **No AI Fallback (Unless Specified):** Unless the "Generate with AI" button is used, recipes should come only from TheMealDB API.
3.  **Multi-Ingredient Search:** Implement multi-ingredient search by searching each ingredient individually and combining the results.
    *   Note: TheMealDB's multiple ingredient filter is premium-only, so search each ingredient separately and merge unique results.
4.  **Ingredient Normalization:** Normalize ingredients by lowercasing and trimming whitespace.
5.  **Graceful Error Handling:** Handle API errors gracefully and provide user-friendly error messages.
6.  **Relevance Sorting:** Sort recipes by relevance, with recipes that contain more matching ingredients appearing first.
7.  **Saved Recipes**:
    *   Require authentication for saving, listing, and deleting saved recipes.
    *   Prevent duplicate saved recipes using a unique index on `{ userId, recipeId }`.
    *   Do not write to Mongo for anonymous users.
    *   Store full recipe details in the database, including ingredients and preparation steps.

### AI RECIPE GENERATION (GOOGLE GEMINI)

1.  **Gemini API:** Use the Google Gemini API for AI recipe generation.
2.  **AI Model:** Use the `gemini-1.5-flash` model for fast and cheaper recipe generation. The old "gemini-pro" model is deprecated/unsupported in the latest endpoints.
3.  **Prompt Engineering:** Craft a clear and concise prompt that specifies the desired JSON structure and recipe characteristics.
4.  **JSON Parsing:** Implement robust JSON parsing to handle different response formats from the Gemini API.
5.  **Error Handling:** Handle API errors gracefully and provide user-friendly error messages.
6.  **Visual Distinction:** Clearly label AI-generated recipes in the UI.
7.  **Full Recipe Details**: Store all recipe details, including ingredients, instructions, and metadata.

## TECH STACK

### BACKEND

1.  **FastAPI:** A modern, fast (high-performance), web framework for building APIs with Python 3.7+
2.  **MongoDB Atlas:** A fully-managed cloud database.
3.  **Motor:** An asynchronous Python driver for MongoDB.
4.  **Passlib:** A password hashing library.
5.  **PyJWT:** A library for encoding and decoding JWTs.
6.  **Pydantic v2:** A data validation and settings management library.
7.  **python-dotenv:** A library for reading environment variables from a `.env` file.
8.  **CORS:** Cross-Origin Resource Sharing for allowing requests from the frontend.
9.  **httpx:** An HTTP client for making asynchronous requests.
10. **google-generativeai==0.3.2**: Google's generative AI api.

### FRONTEND

1.  **React:** A JavaScript library for building user interfaces.
2.  **Vite:** A fast build tool and development server for modern web projects.
3.  **TypeScript:** A typed superset of JavaScript.

## MODELS

### BACKEND

1.  **RegisterIn:** Model for user registration input.
2.  **LoginIn:** Model for user login input.
3.  **UserPublic:** Model for public user information.
4.  **TokenOut:** Model for JWT token output.
5.  **ProfileOut:** Model for user profile output.
6.  **UserInDB:** Model for user data stored in the database.
7.  **RecipeSearchIn:** Model for recipe search input.
8.  **RecipeSearchOut:** Model for recipe search output.
9.  **Recipe:** Model for recipe data.
10. **Ingredient:** Model for ingredient data.
11. **SaveRecipeIn:** Model for saving a recipe.  Includes full recipe details: cuisine, meal_type, tags, ingredients, instructions, AI-specific fields (time\_minutes, servings, difficulty, nutrition\_summary, is\_ai\_generated).
12. **SavedRecipe:** Model for saved recipe data. Includes full recipe details for viewing: cuisine, meal\_type, tags, ingredients, instructions, AI-specific fields.
13. **SavedRecipeOut:** Model for saved recipe output.
14. **OkResponse:** Model for generic OK response.
15. **AIRecipeRequest:** Model for AI recipe generation input.
16. **AIRecipe:** Model for AI-generated recipe data.
17. **AIRecipeResponse:** Model for AI recipe generation output.

### FRONTEND

1.  **RegisterData:** Interface for user registration data.
2.  **LoginData:** Interface for user login data.
3.  **ProfileResponse:** Interface for user profile response.
4.  **ApiError:** Interface for API error responses.
5.  **Recipe:** Interface for recipe data.
6.  **Ingredient:** Interface for ingredient data.
7.  **RecipeSearchRequest:** Interface for recipe search requests.
8.  **RecipeSearchResponse:** Interface for recipe search responses.
9.  **AIRecipe:** Interface for AI recipe data.
10. **AIRecipeRequest:** Interface for AI recipe requests.
11. **AIRecipeResponse:** Interface for AI recipe responses.
12. **SaveRecipeRequest:** Interface for saving recipe requests. Includes title, image (optional), and source.
13. **SavedRecipe:** Interface for saved recipe data.  Includes full recipe details for viewing: cuisine, meal\_type, tags, ingredients, instructions, AI-specific fields.
14. **SavedRecipesResponse:** Interface for saved recipes responses.
15. **OkResponse:** Interface for generic OK responses.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

### ENVIRONMENT VARIABLES

1.  **MONGODB\_URI:** The URI for connecting to MongoDB Atlas.
2.  **MONGODB\_DB:** The name of the MongoDB database.
3.  **JWT\_SECRET:** The secret key for signing JWTs.
4.  **JWT\_EXPIRES\_MIN:** The expiration time for JWTs in minutes.
5.  **CORS\_ORIGIN:** The origin for CORS.
6.  **GEMINI\_API\_KEY:** The API key for the Google Gemini API.

### DATABASE INDEXES

1.  **users.email:** Unique index on the email field to ensure each user has a unique email address.
2. **saved\_recipes**:
    *   Compound unique index on `userId` and `recipeId` to prevent duplicate saved recipes.
    *   Index on `userId` for efficient lookups.
    *   Index on `createdAt` (descending) for sorting by newest first.

## WORKFLOW & RELEASE RULES

1.  **Branching Strategy:** Use a feature branch workflow.
2.  **Code Reviews:** All code changes must be reviewed before merging.
3.  **Testing:** Implement unit and integration tests to ensure code quality.
4.  **Linting:** Use linters to enforce code style and prevent errors.
5.  **Deployment:** Use a CI/CD pipeline for automated deployments.

## DEBUGGING

### BACKEND

1.  **Debug Endpoint:** Add a `/debug/users` endpoint to check users in the database.
2.  **Error Logging:** Provide detailed error logging for API failures.
3.  **Detailed Exceptions**: Catch specific exceptions to help troubleshoot.

### FRONTEND

1.  **Console Logging:** Use `console.log` to debug frontend issues.
2.  **Network Tab:** Use the browser's network tab to inspect API requests and responses.

## CODING STANDARDS

### BACKEND

1.  **Asynchronous Code:** Use `async` and `await` for asynchronous operations with Motor.
2.  **Pydantic Models:** Use Pydantic models for data validation and serialization.
3.  **HTTP Exceptions:** Raise HTTP exceptions for API errors.
4.  **Function Length:** Keep functions short and focused.
5.  **Comments:** Add comments to explain complex logic.

### FRONTEND

1.  **TypeScript:** Use TypeScript for all frontend code.
2.  **React Components:** Break down the UI into reusable React components.
3.  **State Management:** Use React's `useState` hook for managing component state.
4.  **API Calls:** Use the `api.ts` file for making API calls to the backend.
5.  **Error Handling:** Display user-friendly error messages for API failures.
6.  **Loading States:** Show loading indicators while data is being fetched.
7.  **Empty States:** Display informative messages when there is no data to show.

## COOKIFY APP NAME

1. The application should be named "Cookify." This includes the header, loading screen, page title (`index.html`), etc.